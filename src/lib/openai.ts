class OpenAIService {
  private apiKey: string;
  private baseUrl: string = 'https://api.openai.com/v1/chat/completions';

  constructor() {
    this.apiKey = import.meta.env.VITE_OPENAI_API_KEY;
    
    if (!this.apiKey) {
      throw new Error('‚ùå VITE_OPENAI_API_KEY n√£o encontrada no ambiente');
    }

    if (!this.apiKey.startsWith('sk-') && !this.apiKey.startsWith('sk-proj-')) {
      throw new Error('‚ùå API Key inv√°lida - deve come√ßar com sk- ou sk-proj-');
    }
  }

  async generateFinancialAdvice(userMessage: string, userContext: any = {}) {
    try {
      const systemPrompt = this.buildSystemPrompt(userContext);
      
      const requestBody = {
        model: "gpt-3.5-turbo",
        messages: [
          { role: "system", content: systemPrompt },
          { role: "user", content: userMessage }
        ],
        max_tokens: 500,
        temperature: 0.7
      };

      const response = await fetch(this.baseUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.apiKey}`,
        },
        body: JSON.stringify(requestBody)
      });

      if (!response.ok) {
        const errorData = await response.text();
        throw new Error(`OpenAI API Error ${response.status}: ${errorData}`);
      }

      const data = await response.json();
      let content = data.choices[0]?.message?.content || '';
      
      // Verificar se a resposta foi cortada
      const finishReason = data.choices[0]?.finish_reason;
      if (finishReason === 'length') {
        console.warn('‚ö†Ô∏è Resposta cortada por limite de tokens, tentando novamente com prompt mais conciso...');
        
        // Tentar novamente com prompt mais conciso
        const concisePrompt = `Responda de forma concisa e completa sobre: ${userMessage}
        
Contexto: Assistente financeira brasileira
Formato: Use **negrito** e ‚Ä¢ bullets quando apropriado
Limite: Resposta completa em at√© 400 palavras`;

        const retryBody = {
          model: "gpt-3.5-turbo",
          messages: [
            { role: "system", content: concisePrompt },
            { role: "user", content: userMessage }
          ],
          max_tokens: 600, // Ainda mais tokens na segunda tentativa
          temperature: 0.7,
        };

        const retryResponse = await fetch(this.baseUrl, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${this.apiKey}`,
          },
          body: JSON.stringify(retryBody)
        });

        if (retryResponse.ok) {
          const retryData = await retryResponse.json();
          content = retryData.choices[0]?.message?.content || content;
        }
      }
      
      return {
        success: true,
        content: content,
        suggestions: this.generateSuggestions(userMessage)
      };
    } catch (error) {
      console.error('‚ùå Erro na API da OpenAI:', error);
      
      return {
        success: false,
        content: this.getFallbackResponse(userMessage),
        suggestions: this.generateSuggestions(userMessage),
        error: error instanceof Error ? error.message : 'Erro desconhecido'
      };
    }
  }

  private buildSystemPrompt(userContext: any) {
    // Monta contexto detalhado com todos os dados do dashboard
    let contextInfo = '';
    if (userContext) {
      contextInfo += '\nCONTEXTO FINANCEIRO DO USU√ÅRIO:\n';
      if (userContext.totalMonthlyIncome) contextInfo += `- Renda mensal total: R$ ${userContext.totalMonthlyIncome}\n`;
      if (userContext.totalMonthlyExpenses) contextInfo += `- Gastos mensais totais: R$ ${userContext.totalMonthlyExpenses}\n`;
      if (userContext.netMonthlyIncome) contextInfo += `- Sobra mensal: R$ ${userContext.netMonthlyIncome}\n`;
      if (userContext.totalInvestmentValue) contextInfo += `- Investimentos: R$ ${userContext.totalInvestmentValue} (${userContext.investmentTypes?.join(', ')})\n`;
      if (userContext.totalRealEstateValue) contextInfo += `- Im√≥veis: R$ ${userContext.totalRealEstateValue} (${userContext.propertyCount} propriedades)\n`;
      if (userContext.totalDebt) contextInfo += `- D√≠vidas: R$ ${userContext.totalDebt}\n`;
      if (userContext.totalBills) contextInfo += `- Contas fixas: R$ ${userContext.totalBills}\n`;
      if (userContext.totalRetirementSaved) contextInfo += `- Previd√™ncia: R$ ${userContext.totalRetirementSaved}\n`;
      if (userContext.totalVehicleValue) contextInfo += `- Ve√≠culos: R$ ${userContext.totalVehicleValue}\n`;
      if (userContext.totalExoticValue) contextInfo += `- Ativos ex√≥ticos: R$ ${userContext.totalExoticValue}\n`;
      if (userContext.netWorth) contextInfo += `- Patrim√¥nio l√≠quido: R$ ${userContext.netWorth}\n`;
      if (userContext.emergencyFundMonths) contextInfo += `- Reserva de emerg√™ncia: ${userContext.emergencyFundMonths} meses\n`;
      if (userContext.goalCount) contextInfo += `- Metas financeiras: ${userContext.goalCount} ativa(s), poupado R$ ${userContext.totalGoalsSaved}\n`;
      if (userContext.goals) contextInfo += `- Detalhes das metas: ${JSON.stringify(userContext.goals)}\n`;
      if (userContext.expenseCategories) contextInfo += `- Categorias de gastos: ${userContext.expenseCategories.join(', ')}\n`;
      if (userContext.incomeCategories) contextInfo += `- Categorias de renda: ${userContext.incomeCategories.join(', ')}\n`;
      if (userContext.recentTransactions) contextInfo += `- Transa√ß√µes recentes: ${JSON.stringify(userContext.recentTransactions)}\n`;
    }

    return `
Voc√™ √© uma assistente financeira especializada em finan√ßas pessoais brasileiras.

SUAS CARACTER√çSTICAS:
üáßüá∑ Especialista no mercado financeiro brasileiro
üí° Conhece produtos financeiros nacionais (CDI, Selic, CDB, LCI/LCA, Tesouro Direto)
üìä Entende tributa√ß√£o brasileira (IR, IOF, etc.)
üó£Ô∏è Usa linguagem clara e acess√≠vel
üì± D√° conselhos pr√°ticos e acion√°veis

SUAS ESPECIALIDADES:
‚úÖ Or√ßamento dom√©stico e controle de gastos
‚úÖ Investimentos (renda fixa, a√ß√µes, fundos, previd√™ncia)
‚úÖ Planejamento para aposentadoria
‚úÖ Estrat√©gias de quita√ß√£o de d√≠vidas
‚úÖ Forma√ß√£o de reserva de emerg√™ncia
‚úÖ Educa√ß√£o financeira brasileira

${contextInfo}

INSTRU√á√ïES PARA RESPOSTA:
- M√°ximo 400 palavras (ajustado para respostas completas)
- Use **negrito** para destacar pontos importantes
- Use ‚Ä¢ para bullet points
- Inclua pelo menos uma dica pr√°tica
- Seja espec√≠fico sobre o contexto brasileiro
- Use emojis moderadamente (no in√≠cio de se√ß√µes)
- Evite jarg√µes t√©cnicos excessivos
- Sempre em portugu√™s brasileiro
- Quebras de linha para organizar o conte√∫do
- SEMPRE complete sua resposta - n√£o corte no meio

Responda de forma √∫til, educativa e bem formatada. IMPORTANTE: Sempre termine sua resposta de forma completa.
`;
  }

  private generateSuggestions(userMessage: string): string[] {
    const lowerMessage = userMessage.toLowerCase();
    
    const suggestionMap: Record<string, string[]> = {
      'economia': [
        "Como fazer or√ßamento 50/30/20?",
        "Melhores apps para controle financeiro",
        "Dicas para reduzir gastos mensais"
      ],
      'investimento': [
        "CDB vs Tesouro Direto: qual escolher?",
        "Como come√ßar com R$ 100/m√™s",
        "Melhores corretoras gratuitas"
      ],
      'd√≠vida': [
        "Como renegociar no Serasa?",
        "M√©todo bola de neve funciona?",
        "Feir√£o de quita√ß√£o: pr√≥s e contras"
      ],
      'aposentadoria': [
        "INSS vs Previd√™ncia Privada",
        "Simulador de aposentadoria",
        "Quanto poupar por m√™s?"
      ],
      'reserva': [
        "Onde investir a reserva de emerg√™ncia?",
        "Qual valor ideal da reserva?",
        "CDB vs Poupan√ßa: qual melhor?"
      ],
      'renda': [
        "Como aumentar renda extra?",
        "Investimentos que pagam mensalmente",
        "Renda passiva para iniciantes"
      ]
    };

    // Detectar categoria
    for (const [category, suggestions] of Object.entries(suggestionMap)) {
      if (lowerMessage.includes(category) || 
          (category === 'investimento' && lowerMessage.includes('investir')) ||
          (category === 'd√≠vida' && lowerMessage.includes('d√©bito')) ||
          (category === 'renda' && lowerMessage.includes('ganhar'))) {
        return suggestions;
      }
    }

    // Sugest√µes padr√£o
    return [
      "Como organizar minha vida financeira?",
      "Investimentos para iniciantes",
      "Estrat√©gias de economia dom√©stica"
    ];
  }

  private getFallbackResponse(userMessage: string): string {
    const fallbackResponses: Record<string, string> = {
      'economia': `üí∞ **Para economizar no Brasil:**

‚Ä¢ **Regra 50/30/20**: 50% necessidades, 30% desejos, 20% investimentos
‚Ä¢ **Revise assinaturas**: Netflix, Spotify, academia que n√£o usa
‚Ä¢ **Apps √∫teis**: GuiaBolso, Mobills, Organizze
‚Ä¢ **Negocie contas**: energia, internet, celular
‚Ä¢ **Compre consciente**: liste antes de ir ao mercado

üéØ **Dica pr√°tica**: Anote TODOS os gastos por 30 dias. Voc√™ vai se surpreender!`,

      'investimento': `üìà **Primeiros passos para investir:**

‚Ä¢ **1¬∫ passo**: Quite d√≠vidas caras (cart√£o, cheque especial)
‚Ä¢ **2¬∫ passo**: Forme reserva de emerg√™ncia (6 meses de gastos)
‚Ä¢ **3¬∫ passo**: Abra conta em corretora (XP, Rico, Clear)
‚Ä¢ **4¬∫ passo**: Comece com renda fixa (CDB, Tesouro Direto)
‚Ä¢ **5¬∫ passo**: Estude antes de partir para a√ß√µes

üöÄ **Dica pr√°tica**: Comece com R$ 100/m√™s no Tesouro Selic.`,

      'd√≠vida': `üè¶ **Estrat√©gia para quitar d√≠vidas:**

‚Ä¢ **Liste tudo**: valores, juros, parcelas restantes
‚Ä¢ **Priorize**: cart√£o rotativo e cheque especial primeiro
‚Ä¢ **Negocie**: ligue para bancos, sempre h√° desconto
‚Ä¢ **Use m√©todo "avalanche"**: quite maiores juros primeiro
‚Ä¢ **Corte gastos**: temporariamente para acelerar quita√ß√£o

üí° **Dica pr√°tica**: Serasa oferece descontos at√© 90% online.`,

      'default': `üéØ **Vamos organizar suas finan√ßas:**

‚Ä¢ **Diagn√≥stico**: Anote gastos por 30 dias
‚Ä¢ **Or√ßamento**: Use regra 50/30/20
‚Ä¢ **Prioridades**: Quite d√≠vidas caras primeiro
‚Ä¢ **Reserva**: 6 meses de gastos essenciais
‚Ä¢ **Investimentos**: Comece com renda fixa

üìä **Dica pr√°tica**: Use planilhas gratuitas do Banco Central.`
    };

    const lowerMessage = userMessage.toLowerCase();
    
    if (lowerMessage.includes('economizar') || lowerMessage.includes('economia')) {
      return fallbackResponses.economia;
    } else if (lowerMessage.includes('investir') || lowerMessage.includes('investimento')) {
      return fallbackResponses.investimento;
    } else if (lowerMessage.includes('d√≠vida') || lowerMessage.includes('d√©bito')) {
      return fallbackResponses.d√≠vida;
    } else {
      return fallbackResponses.default;
    }
  }
}

export default OpenAIService;